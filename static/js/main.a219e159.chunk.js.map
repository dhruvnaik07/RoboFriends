{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundary.js","Components/CounterButton.js","Components/Header.js","Containers/App.js","Actions.js","Constants.js","serviceWorker.js","Reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","Cardlist","robots","cardComponent","map","user","i","Components_Card","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","Components_CounterButton","App","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Components_Header","Components_Searchbox","Components_Scroll","Components_ErrorBoundary","Components_Cardlist","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a219e159.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n\t\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt='robot' />\r\n\r\n\t\t\t<div>\r\n\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n\r\n\tconst cardComponent = robots.map((user,i) => {\r\n\r\n\t\treturn <Card \r\n\t\t\t\tkey={robots[i].id}\r\n\t\t\t\tid={robots[i].id}\r\n\t\t\t\tname={robots[i].name}\r\n\t\t\t\temail={robots[i].email}/>\r\n\t})\r\n\r\n\treturn (\r\n\r\n\t\t<div>\r\n\t\t\t{cardComponent}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div className='pa2'>\r\n\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={searchChange}/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div style={{overflow: 'scroll', border: '5px solid black', height: '500px'}}>\r\n\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\t\r\n\tconstructor(props) {\r\n\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tif (this.state.hasError) {\r\n\r\n\t\t\treturn <h1>It's an error!</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\r\n\t\t\tcount:0\r\n\t\t}\r\n\t}\r\n\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\r\n\t\tif (this.state.count !== nextState.count)\r\n\t\t\treturn true;\r\n\r\n\t\telse\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t updateCount = () => {\r\n\r\n\t \tthis.setState(state => {\r\n\t \t\treturn {count: this.state.count+1}\r\n\t \t})\r\n\t }\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\r\n\t\t\tCount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\r\n\t shouldComponentUpdate(nextProps, nextState) {\r\n\r\n\t \treturn false;\r\n\t }\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<CounterButton color={'red'} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport '../Containers/App.css';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport ErrorBoundary from '../Components/ErrorBoundary.js';\r\nimport {setSearchfield, requestRobots} from '../Actions.js';\r\nimport Header from '../Components/Header.js';\r\n\r\nconst mapStateToProps = state => {\r\n\r\n\treturn {\r\n\r\n\t\tsearchfield: state.searchRobots.searchfield,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.robots,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n\treturn {\r\n\r\n\t\tonSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {\r\n\r\n\t\t\trobots: []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender () {\r\n\r\n\t\tconst {searchfield, onSearchChange, robots, isPending} = this.props;\r\n\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\r\n\t\tif (!isPending) {\r\n\r\n\t\t\treturn <h1 className='tc'>Loading</h1>\r\n\t\t}\r\n\r\n\t\telse {\r\n\r\n\t\t\treturn (\r\n\r\n\t\t\t\t<div className='tc'>\r\n\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t\t<Searchbox searchChange = {onSearchChange}/>\r\n\r\n\t\t\t\t\t<Scroll>\r\n\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<Cardlist robots = {filteredRobots} />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\r\n\tCHANGE_SEARCH_FIELD, \r\n\tREQUEST_ROBOTS_PENDING, \r\n\tREQUEST_ROBOTS_SUCCESS, \r\n\tREQUEST_ROBOTS_FAILED} from './Constants.js';\r\n\r\nexport const setSearchfield = (text) => ({\r\n\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n\r\n\tCHANGE_SEARCH_FIELD, \r\n\tREQUEST_ROBOTS_PENDING, \r\n\tREQUEST_ROBOTS_SUCCESS, \r\n\tREQUEST_ROBOTS_FAILED} from './Constants.js';\r\n\r\nconst initialStateSearch = {\r\n\r\n\tsearchfield: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\r\n\tswitch(action.type) {\r\n\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchfield: action.payload})\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\r\n\tswitch(action.type) {\r\n\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true})\r\n\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\r\n\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './Reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}